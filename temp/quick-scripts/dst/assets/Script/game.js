
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/game.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '47c77yOeKpPiJVINXipHohs', 'game');
// Script/game.js

"use strict";

/**
 * @author heyuchang
 * @file 游戏控制
 */
var AC = require('GameAct');

cc.Class({
  "extends": cc.Component,
  properties: {
    _status: 0,
    //0 未开始 1 游戏开始 2 游戏暂停 3 游戏结束 4 下落状态 5无法触摸状态
    blockPrefab: cc.Prefab,
    blockSprite: [cc.SpriteFrame],
    //todo: 换成动态生成 暂不处理
    warningSpriteFrame: [cc.SpriteFrame],
    propSpriteFrame: [cc.SpriteFrame],
    checkMgr: require("elementCheck"),
    revivePage: cc.Node
  },
  start: function start() {
    this.bindNode();
    this.generatePool();
    this.loadRes();
  },
  loadRes: function loadRes() {},
  init: function init(c) {
    this._controller = c;
    this._score = c.scoreMgr;
    this.rowNum = c.config.json.rowNum;
    this.gap = c.config.json.gap;
    this.animationSpeed = c.config.json.gap;
    this.blockWidth = (730 - (this.rowNum + 1) * this.gap) / this.rowNum;
    this.reviveTimer = null; //console.log(this.gap)
    //console.log(this.blockWidth)
  },
  // 动态获取需要动态控制的组件
  bindNode: function bindNode() {
    this.blocksContainer = this.node.getChildByName('map');
  },
  //---------------- 游戏控制 ---------------------
  // 游戏开始
  gameStart: function gameStart() {
    var _this = this;

    this.recoveryAllBlocks().then();

    this._score.init(this);

    this.mapSet(this.rowNum).then(function (result) {
      // console.log('游戏状态改变', result)
      _this._status = 1;
    });
  },
  // 初始化地图
  mapSet: function mapSet(num) {
    var _this2 = this;

    this.map = new Array();
    var self = this; // 生成两个随机的对象数组

    var a = Math.floor(Math.random() * num);
    var b = Math.floor(Math.random() * num);
    var c = Math.floor(1 + Math.random() * (num - 1)) - 1;
    a == c ? c++ : '';
    var d = Math.floor(Math.random() * num);
    return new Promise(function (resolve, reject) {
      for (var i = 0; i < num; i++) {
        //行
        _this2.map[i] = new Array();

        for (var j = 0; j < num; j++) {
          //列
          var itemType = i == a && j == b ? 1 : i == c && j == d ? 2 : 0;
          self.map[i][j] = self.instantiateBlock(self, {
            x: j,
            y: i,
            width: self.blockWidth,
            startTime: (i + j + 1) * self._controller.config.json.startAnimationTime / num * 2
          }, self.blocksContainer, itemType);
        }
      }

      _this2.checkMgr.init(_this2);

      setTimeout(function () {
        resolve('200 OK');

        _this2.checkMgr.elementCheck(_this2);
      }, self._controller.config.json.startAnimationTime * num / 2 / 1 //  (cc.game.getFrameRate() / 60)
      );
    });
  },
  //防抖动 判断是否需要检测下落
  checkNeedFall: function checkNeedFall() {
    var _this3 = this;

    if (this.checkNeedFallTimer) {
      clearTimeout(this.checkNeedFallTimer);
    }

    this.checkNeedFallTimer = setTimeout(function () {
      if (_this3._status == 5) {
        _this3._status = 4;

        _this3.onFall();
      }
    }, 300 / 1 // (cc.game.getFrameRate() / 60)
    );
  },
  //方块下落
  onFall: function onFall() {
    var _this4 = this;

    this.checkGenerateProp(this._score.chain).then(function () {
      var self = _this4;
      var canFall = 0; //从每一列的最下面一个开始往上判断
      //如果有空 就判断有几个空 然后让最上方的方块掉落下来

      for (var j = _this4.rowNum - 1; j >= 0; j--) {
        canFall = 0;

        for (var i = _this4.rowNum - 1; i >= 0; i--) {
          if (_this4.map[i][j].getComponent('element')._status == 2) {
            _this4.blockPool.put(_this4.map[i][j]);

            _this4.map[i][j] = null;
            canFall++;
          } else {
            if (canFall != 0) {
              _this4.map[i + canFall][j] = _this4.map[i][j];
              _this4.map[i][j] = null;

              _this4.map[i + canFall][j].getComponent('element').playFallAction(canFall, {
                x: j,
                y: i + canFall
              });
            }
          }
        }

        for (var k = 0; k < canFall; k++) {
          _this4.map[k][j] = _this4.instantiateBlock(_this4, {
            x: j,
            y: k,
            width: _this4.blockWidth,
            startTime: null
          }, _this4.blocksContainer, '', {
            x: j,
            y: -canFall + k
          });

          _this4.map[k][j].getComponent('element').playFallAction(canFall, null);
        }
      }

      setTimeout(function () {
        _this4.checkMgr.init(_this4);

        _this4.checkMgr.elementCheck(_this4);

        _this4._status = 1;
      }, 250);
    });
  },
  gameOver: function gameOver() {
    this._status = 3;

    this._controller.pageMgr.addPage(2);

    this._controller.pageMgr.addPage(4);

    if (this._controller.social.node.active) {
      this._controller.social.closeBannerAdv();
    }
  },
  // todo 复活
  askRevive: function askRevive() {
    var _this5 = this;

    this._controller.pageMgr.addPage(2);

    this._controller.pageMgr.addPage(5);

    this.revivePage.active = true;
    this.revivePage.getChildByName('askRevive').active = true;
    this.revivePage.getChildByName('successRevive').active = false;
    this.rangeSprite = this.revivePage.getChildByName('askRevive').getChildByName('numBg').getChildByName('sprite').getComponent(cc.Sprite);
    this.rangeSprite.fillRange = 1;
    this.isRangeAction = true;
    var numLabel = this.revivePage.getChildByName('askRevive').getChildByName('numBg').getChildByName('num').getComponent(cc.Label);
    numLabel.string = 9;

    if (this.reviveTimer) {
      clearInterval(this.reviveTimer);
    }

    this.reviveTimer = setInterval(function () {
      if (+numLabel.string > 0) {
        numLabel.string--;
        _this5.rangeSprite.fillRange = 1;
      } else {
        _this5.onSkipRevive();
      }
    }, 1000);
  },
  onReviveButton: function onReviveButton() {
    clearInterval(this.reviveTimer);
    this.isRangeAction = false;

    if (this._controller.social.node.active) {
      this._controller.social.onReviveButton(1);
    } else {
      this.showReviveSuccess();
    }
  },
  showReviveSuccess: function showReviveSuccess() {
    //console.log('打开复活成功页面')
    this.revivePage.getChildByName('askRevive').active = false;
    this.revivePage.getChildByName('successRevive').active = true;
  },
  onReviveCertainBtn: function onReviveCertainBtn() {
    this._controller.pageMgr.removePage(2);

    this.revivePage.active = false;
    this._status = 1;

    this._score.onRevive();
  },
  update: function update() {
    if (this.isRangeAction) {
      this.rangeSprite.fillRange -= 1 / 60;
    }
  },
  onSkipRevive: function onSkipRevive() {
    clearInterval(this.reviveTimer);
    this._controller.pageMgr.pages[5].active = false;

    this._score.onGameOver(true);

    this.isRangeAction = false;
  },
  restart: function restart() {
    var _this6 = this;

    this._controller.pageMgr.onOpenPage(1);

    this.recoveryAllBlocks().then(function () {
      _this6.gameStart();
    });
  },
  // -----------------道具相关---------------
  // 储存用户点击时的方块 用于生成道具
  onUserTouched: function onUserTouched(iid, jid, itemType, color, warning, pos) {
    this.target = {
      i: iid,
      j: jid,
      color: color,
      itemType: itemType,
      x: pos.x,
      y: pos.y,
      warning: warning
    };
  },
  // 生成道具 type 1为双倍倍数 2为炸弹 3为加五百
  generatePropItem: function generatePropItem(type) {
    var _this7 = this;

    return new Promise(function (resolve, reject) {
      // 是否做道具生成动画
      _this7.map[_this7.target.i][_this7.target.j] = _this7.instantiateBlock(_this7, {
        x: _this7.target.j,
        y: _this7.target.i,
        color: _this7.target.color,
        width: _this7.blockWidth,
        startTime: null
      }, _this7.blocksContainer, type);
      setTimeout(function () {
        resolve();
      }, 300);
    });
  },
  checkGenerateProp: function checkGenerateProp(chain) {
    var _this8 = this;

    return new Promise(function (resolve, reject) {
      if (_this8.target.warning) {
        _this8.generatePropItem(_this8.target.warning).then(function () {
          resolve();
          return;
        });
      }

      resolve();
    });
  },
  onItem: function onItem(type, color, pos) {
    switch (type) {
      case 1:
        // 分数翻倍 最高八倍
        this._score.tipBox.init(this._score, 1);

        this._score.addMult(color, pos);

        this._controller.musicManager.onDouble();

        for (var i = 0; i < this.rowNum; i++) {
          //行
          for (var j = 0; j < this.rowNum; j++) {
            //列
            if (this.map[i][j] && this.map[i][j].getComponent('element')._status == 1) {
              var distance = Math.sqrt(Math.pow(pos.x - this.map[i][j].x, 2) + Math.pow(pos.y - this.map[i][j].y, 2));

              if (distance != 0) {
                this.map[i][j].getComponent('element').surfaceAction(distance);
              }
            }
          }
        }

        break;

      case 2:
        // 炸弹 消除同种颜色的
        this._score.tipBox.init(this._score, 2);

        this.node.runAction(AC.shackAction(0.1, 10));

        if (this._controller.social.node.active) {
          this._controller.social.onShakePhone();
        }

        this.isPropChain = true;

        this._controller.musicManager.onBoom();

        for (var _i = 0; _i < this.rowNum; _i++) {
          //行
          for (var _j = 0; _j < this.rowNum; _j++) {
            //列
            if (this.map[_i][_j] && this.map[_i][_j].getComponent('element').color == color && this.map[_i][_j] && this.map[_i][_j].getComponent('element')._status != 2) {
              this.map[_i][_j].getComponent('element').onTouched(color, false, true);
            } else {
              this.map[_i][_j].runAction(AC.rockAction(0.2, 10));
            }
          }
        }

        break;

      case 3:
        //:  加步数
        this._score.tipBox.init(this._score, 4);

        this._controller.musicManager.onDouble();

        for (var _i2 = 0; _i2 < this.rowNum; _i2++) {
          //行
          for (var _j2 = 0; _j2 < this.rowNum; _j2++) {
            //列
            if (this.map[_i2][_j2] && this.map[_i2][_j2].getComponent('element')._status == 1) {
              var _distance = Math.sqrt(Math.pow(pos.x - this.map[_i2][_j2].x, 2) + Math.pow(pos.y - this.map[_i2][_j2].y, 2));

              if (_distance != 0) {
                this.map[_i2][_j2].getComponent('element').surfaceAction(_distance);
              }
            }
          }
        }

        this._score.onStep(3).then();

        break;

      case 4:
        // : 消除全部单身的方块
        this._score.tipBox.init(this._score, 5);

        this.isPropChain = true;

        this._controller.musicManager.onMagic();

        for (var _i3 = 0; _i3 < this.rowNum; _i3++) {
          //行
          for (var _j3 = 0; _j3 < this.rowNum; _j3++) {
            //列
            if (this.map[_i3][_j3] && this.map[_i3][_j3].getComponent('element').isSingle && this.map[_i3][_j3] && this.map[_i3][_j3].getComponent('element')._status != 2) {
              var _distance2 = Math.sqrt(Math.pow(pos.x - this.map[_i3][_j3].x, 2) + Math.pow(pos.y - this.map[_i3][_j3].y, 2));

              this.map[_i3][_j3].getComponent('element').onTouched(color, false, true, _distance2);

              console.log("魔法棒触发的点", _i3, _j3, this.map[_i3][_j3].getComponent('element').color, this.map[_i3][_j3].getComponent('element').isSingle);
            }
          }
        }

        break;
    }
  },
  //--------------------- 预制体实例化---------------------
  // 生成对象池
  generatePool: function generatePool() {
    this.blockPool = new cc.NodePool();

    for (var i = 0; i < Math.pow(this.rowNum, 2); i++) {
      var block = cc.instantiate(this.blockPrefab);
      this.blockPool.put(block);
    }
  },
  // 实例化单个方块
  instantiateBlock: function instantiateBlock(self, data, parent, itemType, pos) {
    itemType = itemType ? itemType : 0;

    if (itemType != 0) {// console.log("道具节点数据", data, itemType)
    }

    var block = null;

    if (self.blockPool && self.blockPool.size() > 0) {
      block = self.blockPool.get();
    } else {
      block = cc.instantiate(self.blockPrefab);
    }

    block.parent = parent;
    block.scale = 1;
    block.x = 0;
    block.y = 0;
    block.getComponent('element').init(self, data, this.blockWidth, itemType, pos);
    return block;
  },
  // 回收所有节点
  recoveryAllBlocks: function recoveryAllBlocks() {
    var _this9 = this;

    return new Promise(function (resolve, reject) {
      var children = _this9.blocksContainer.children;

      if (children.length != 0) {
        var length = children.length; //   console.log(length)

        for (var i = 0; i < length; i++) {
          _this9.blockPool.put(children[0]);
        }

        for (var _i4 = 0; _i4 < _this9.rowNum; _i4++) {
          for (var j = 0; j < _this9.rowNum; j++) {
            _this9.map[_i4][j] = null;
          }
        }
      }

      resolve('');
    });
  }
});

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxnYW1lLmpzIl0sIm5hbWVzIjpbIkFDIiwicmVxdWlyZSIsImNjIiwiQ2xhc3MiLCJDb21wb25lbnQiLCJwcm9wZXJ0aWVzIiwiX3N0YXR1cyIsImJsb2NrUHJlZmFiIiwiUHJlZmFiIiwiYmxvY2tTcHJpdGUiLCJTcHJpdGVGcmFtZSIsIndhcm5pbmdTcHJpdGVGcmFtZSIsInByb3BTcHJpdGVGcmFtZSIsImNoZWNrTWdyIiwicmV2aXZlUGFnZSIsIk5vZGUiLCJzdGFydCIsImJpbmROb2RlIiwiZ2VuZXJhdGVQb29sIiwibG9hZFJlcyIsImluaXQiLCJjIiwiX2NvbnRyb2xsZXIiLCJfc2NvcmUiLCJzY29yZU1nciIsInJvd051bSIsImNvbmZpZyIsImpzb24iLCJnYXAiLCJhbmltYXRpb25TcGVlZCIsImJsb2NrV2lkdGgiLCJyZXZpdmVUaW1lciIsImJsb2Nrc0NvbnRhaW5lciIsIm5vZGUiLCJnZXRDaGlsZEJ5TmFtZSIsImdhbWVTdGFydCIsInJlY292ZXJ5QWxsQmxvY2tzIiwidGhlbiIsIm1hcFNldCIsInJlc3VsdCIsIm51bSIsIm1hcCIsIkFycmF5Iiwic2VsZiIsImEiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJiIiwiZCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaSIsImoiLCJpdGVtVHlwZSIsImluc3RhbnRpYXRlQmxvY2siLCJ4IiwieSIsIndpZHRoIiwic3RhcnRUaW1lIiwic3RhcnRBbmltYXRpb25UaW1lIiwic2V0VGltZW91dCIsImVsZW1lbnRDaGVjayIsImNoZWNrTmVlZEZhbGwiLCJjaGVja05lZWRGYWxsVGltZXIiLCJjbGVhclRpbWVvdXQiLCJvbkZhbGwiLCJjaGVja0dlbmVyYXRlUHJvcCIsImNoYWluIiwiY2FuRmFsbCIsImdldENvbXBvbmVudCIsImJsb2NrUG9vbCIsInB1dCIsInBsYXlGYWxsQWN0aW9uIiwiayIsImdhbWVPdmVyIiwicGFnZU1nciIsImFkZFBhZ2UiLCJzb2NpYWwiLCJhY3RpdmUiLCJjbG9zZUJhbm5lckFkdiIsImFza1Jldml2ZSIsInJhbmdlU3ByaXRlIiwiU3ByaXRlIiwiZmlsbFJhbmdlIiwiaXNSYW5nZUFjdGlvbiIsIm51bUxhYmVsIiwiTGFiZWwiLCJzdHJpbmciLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJvblNraXBSZXZpdmUiLCJvblJldml2ZUJ1dHRvbiIsInNob3dSZXZpdmVTdWNjZXNzIiwib25SZXZpdmVDZXJ0YWluQnRuIiwicmVtb3ZlUGFnZSIsIm9uUmV2aXZlIiwidXBkYXRlIiwicGFnZXMiLCJvbkdhbWVPdmVyIiwicmVzdGFydCIsIm9uT3BlblBhZ2UiLCJvblVzZXJUb3VjaGVkIiwiaWlkIiwiamlkIiwiY29sb3IiLCJ3YXJuaW5nIiwicG9zIiwidGFyZ2V0IiwiZ2VuZXJhdGVQcm9wSXRlbSIsInR5cGUiLCJvbkl0ZW0iLCJ0aXBCb3giLCJhZGRNdWx0IiwibXVzaWNNYW5hZ2VyIiwib25Eb3VibGUiLCJkaXN0YW5jZSIsInNxcnQiLCJwb3ciLCJzdXJmYWNlQWN0aW9uIiwicnVuQWN0aW9uIiwic2hhY2tBY3Rpb24iLCJvblNoYWtlUGhvbmUiLCJpc1Byb3BDaGFpbiIsIm9uQm9vbSIsIm9uVG91Y2hlZCIsInJvY2tBY3Rpb24iLCJvblN0ZXAiLCJvbk1hZ2ljIiwiaXNTaW5nbGUiLCJjb25zb2xlIiwibG9nIiwiTm9kZVBvb2wiLCJibG9jayIsImluc3RhbnRpYXRlIiwiZGF0YSIsInBhcmVudCIsInNpemUiLCJnZXQiLCJzY2FsZSIsImNoaWxkcmVuIiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBSUEsSUFBSUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUFoQjs7QUFDQUMsRUFBRSxDQUFDQyxLQUFILENBQVM7QUFDUCxhQUFTRCxFQUFFLENBQUNFLFNBREw7QUFFUEMsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZDLElBQUFBLE9BQU8sRUFBRSxDQURDO0FBQ0U7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QXBELEVBQWdFeUIsUUFBaEUsRUFBMEVxRCxHQUExRTtBQUNBLFdBQU8wQixLQUFQO0FBQ0QsR0ExVk07QUEyVlA7QUFDQWxHLEVBQUFBLGlCQTVWTywrQkE0VmE7QUFBQTs7QUFDbEIsV0FBTyxJQUFJYyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3RDLFVBQUl5RixRQUFRLEdBQUcsTUFBSSxDQUFDN0csZUFBTCxDQUFxQjZHLFFBQXBDOztBQUNBLFVBQUlBLFFBQVEsQ0FBQ0MsTUFBVCxJQUFtQixDQUF2QixFQUEwQjtBQUN4QixZQUFJQSxNQUFNLEdBQUdELFFBQVEsQ0FBQ0MsTUFBdEIsQ0FEd0IsQ0FFeEI7O0FBQ0EsYUFBSyxJQUFJekYsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR3lGLE1BQXBCLEVBQTRCekYsQ0FBQyxFQUE3QixFQUFpQztBQUMvQixVQUFBLE1BQUksQ0FBQ21CLFNBQUwsQ0FBZUMsR0FBZixDQUFtQm9FLFFBQVEsQ0FBQyxDQUFELENBQTNCO0FBQ0Q7O0FBQ0QsYUFBSyxJQUFJeEYsR0FBQyxHQUFHLENBQWIsRUFBZ0JBLEdBQUMsR0FBRyxNQUFJLENBQUM1QixNQUF6QixFQUFpQzRCLEdBQUMsRUFBbEMsRUFBc0M7QUFDcEMsZUFBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLE1BQUksQ0FBQzdCLE1BQXpCLEVBQWlDNkIsQ0FBQyxFQUFsQyxFQUFzQztBQUNwQyxZQUFBLE1BQUksQ0FBQ2IsR0FBTCxDQUFTWSxHQUFULEVBQVlDLENBQVosSUFBaUIsSUFBakI7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0RILE1BQUFBLE9BQU8sQ0FBQyxFQUFELENBQVA7QUFDRCxLQWZNLENBQVA7QUFnQkQ7QUE3V00sQ0FBVCIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAYXV0aG9yIGhleXVjaGFuZ1xuICogQGZpbGUg5ri45oiP5o6n5Yi2XG4gKi9cbnZhciBBQyA9IHJlcXVpcmUoJ0dhbWVBY3QnKVxuY2MuQ2xhc3Moe1xuICBleHRlbmRzOiBjYy5Db21wb25lbnQsXG4gIHByb3BlcnRpZXM6IHtcbiAgICBfc3RhdHVzOiAwLCAvLzAg5pyq5byA5aeLIDEg5ri45oiP5byA5aeLIDIg5ri45oiP5pqC5YGcIDMg5ri45oiP57uT5p2fIDQg5LiL6JC954q25oCBIDXml6Dms5Xop6bmkbjnirbmgIFcbiAgICBibG9ja1ByZWZhYjogY2MuUHJlZmFiLFxuICAgIGJsb2NrU3ByaXRlOiBbY2MuU3ByaXRlRnJhbWVdLCAvL3RvZG86IOaNouaIkOWKqOaAgeeUn+aIkCDmmoLkuI3lpITnkIZcbiAgICB3YXJuaW5nU3ByaXRlRnJhbWU6IFtjYy5TcHJpdGVGcmFtZV0sXG4gICAgcHJvcFNwcml0ZUZyYW1lOiBbY2MuU3ByaXRlRnJhbWVdLFxuICAgIGNoZWNrTWdyOiByZXF1aXJlKFwiZWxlbWVudENoZWNrXCIpLFxuICAgIHJldml2ZVBhZ2U6IGNjLk5vZGUsXG4gIH0sXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMuYmluZE5vZGUoKVxuICAgIHRoaXMuZ2VuZXJhdGVQb29sKClcbiAgICB0aGlzLmxvYWRSZXMoKVxuICB9LFxuICBsb2FkUmVzKCkge1xuXG4gIH0sXG4gIGluaXQoYykge1xuICAgIHRoaXMuX2NvbnRyb2xsZXIgPSBjXG4gICAgdGhpcy5fc2NvcmUgPSBjLnNjb3JlTWdyXG4gICAgdGhpcy5yb3dOdW0gPSBjLmNvbmZpZy5qc29uLnJvd051bVxuICAgIHRoaXMuZ2FwID0gYy5jb25maWcuanNvbi5nYXBcbiAgICB0aGlzLmFuaW1hdGlvblNwZWVkID0gYy5jb25maWcuanNvbi5nYXBcbiAgICB0aGlzLmJsb2NrV2lkdGggPSAoNzMwIC0gKHRoaXMucm93TnVtICsgMSkgKiB0aGlzLmdhcCkgLyB0aGlzLnJvd051bVxuICAgIHRoaXMucmV2aXZlVGltZXIgPSBudWxsXG4gICAgLy9jb25zb2xlLmxvZyh0aGlzLmdhcClcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuYmxvY2tXaWR0aClcbiAgfSxcbiAgLy8g5Yqo5oCB6I635Y+W6ZyA6KaB5Yqo5oCB5o6n5Yi255qE57uE5Lu2XG4gIGJpbmROb2RlKCkge1xuICAgIHRoaXMuYmxvY2tzQ29udGFpbmVyID0gdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKCdtYXAnKVxuICB9LFxuICAvLy0tLS0tLS0tLS0tLS0tLS0g5ri45oiP5o6n5Yi2IC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyDmuLjmiI/lvIDlp4tcbiAgZ2FtZVN0YXJ0KCkge1xuICAgIHRoaXMucmVjb3ZlcnlBbGxCbG9ja3MoKS50aGVuKClcbiAgICB0aGlzLl9zY29yZS5pbml0KHRoaXMpXG4gICAgdGhpcy5tYXBTZXQodGhpcy5yb3dOdW0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coJ+a4uOaIj+eKtuaAgeaUueWPmCcsIHJlc3VsdClcbiAgICAgIHRoaXMuX3N0YXR1cyA9IDFcbiAgICB9KVxuXG4gIH0sXG4gIC8vIOWIneWni+WMluWcsOWbvlxuICBtYXBTZXQobnVtKSB7XG4gICAgdGhpcy5tYXAgPSBuZXcgQXJyYXkoKVxuICAgIGxldCBzZWxmID0gdGhpc1xuICAgIC8vIOeUn+aIkOS4pOS4qumaj+acuueahOWvueixoeaVsOe7hFxuICAgIGxldCBhID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbnVtKVxuICAgIGxldCBiID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbnVtKVxuXG4gICAgbGV0IGMgPSBNYXRoLmZsb29yKDEgKyBNYXRoLnJhbmRvbSgpICogKG51bSAtIDEpKSAtIDFcbiAgICBhID09IGMgPyBjKysgOiAnJ1xuICAgIGxldCBkID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbnVtKVxuXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07IGkrKykgeyAvL+ihjFxuICAgICAgICB0aGlzLm1hcFtpXSA9IG5ldyBBcnJheSgpXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbnVtOyBqKyspIHsgLy/liJdcbiAgICAgICAgICBsZXQgaXRlbVR5cGUgPSAoaSA9PSBhICYmIGogPT0gYikgPyAxIDogKGkgPT0gYyAmJiBqID09IGQpID8gMiA6IDBcbiAgICAgICAgICBzZWxmLm1hcFtpXVtqXSA9IHNlbGYuaW5zdGFudGlhdGVCbG9jayhzZWxmLCB7XG4gICAgICAgICAgICB4OiBqLFxuICAgICAgICAgICAgeTogaSxcbiAgICAgICAgICAgIHdpZHRoOiBzZWxmLmJsb2NrV2lkdGgsXG4gICAgICAgICAgICBzdGFydFRpbWU6IChpICsgaiArIDEpICogc2VsZi5fY29udHJvbGxlci5jb25maWcuanNvbi5zdGFydEFuaW1hdGlvblRpbWUgLyBudW0gKiAyXG4gICAgICAgICAgfSwgc2VsZi5ibG9ja3NDb250YWluZXIsIGl0ZW1UeXBlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrTWdyLmluaXQodGhpcylcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHJlc29sdmUoJzIwMCBPSycpO1xuICAgICAgICAgIHRoaXMuY2hlY2tNZ3IuZWxlbWVudENoZWNrKHRoaXMpXG4gICAgICAgIH0sIHNlbGYuX2NvbnRyb2xsZXIuY29uZmlnLmpzb24uc3RhcnRBbmltYXRpb25UaW1lICogbnVtIC8gMiAvIDFcbiAgICAgICAgLy8gIChjYy5nYW1lLmdldEZyYW1lUmF0ZSgpIC8gNjApXG4gICAgICApXG4gICAgfSlcbiAgfSxcbiAgLy/pmLLmipbliqgg5Yik5pat5piv5ZCm6ZyA6KaB5qOA5rWL5LiL6JC9XG4gIGNoZWNrTmVlZEZhbGwoKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tOZWVkRmFsbFRpbWVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5jaGVja05lZWRGYWxsVGltZXIpXG4gICAgfVxuICAgIHRoaXMuY2hlY2tOZWVkRmFsbFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0dXMgPT0gNSkge1xuICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IDRcbiAgICAgICAgICB0aGlzLm9uRmFsbCgpXG4gICAgICAgIH1cbiAgICAgIH0sIDMwMCAvIDFcbiAgICAgIC8vIChjYy5nYW1lLmdldEZyYW1lUmF0ZSgpIC8gNjApXG4gICAgKVxuICB9LFxuICAvL+aWueWdl+S4i+iQvVxuICBvbkZhbGwoKSB7XG4gICAgdGhpcy5jaGVja0dlbmVyYXRlUHJvcCh0aGlzLl9zY29yZS5jaGFpbikudGhlbigoKSA9PiB7XG4gICAgICBsZXQgc2VsZiA9IHRoaXNcbiAgICAgIGxldCBjYW5GYWxsID0gMFxuICAgICAgLy/ku47mr4/kuIDliJfnmoTmnIDkuIvpnaLkuIDkuKrlvIDlp4vlvoDkuIrliKTmlq1cbiAgICAgIC8v5aaC5p6c5pyJ56m6IOWwseWIpOaWreacieWHoOS4quepuiDnhLblkI7orqnmnIDkuIrmlrnnmoTmlrnlnZfmjonokL3kuIvmnaVcbiAgICAgIGZvciAobGV0IGogPSB0aGlzLnJvd051bSAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgIGNhbkZhbGwgPSAwXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnJvd051bSAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWFwW2ldW2pdLmdldENvbXBvbmVudCgnZWxlbWVudCcpLl9zdGF0dXMgPT0gMikge1xuICAgICAgICAgICAgdGhpcy5ibG9ja1Bvb2wucHV0KHRoaXMubWFwW2ldW2pdKVxuICAgICAgICAgICAgdGhpcy5tYXBbaV1bal0gPSBudWxsXG4gICAgICAgICAgICBjYW5GYWxsKytcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGNhbkZhbGwgIT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLm1hcFtpICsgY2FuRmFsbF1bal0gPSB0aGlzLm1hcFtpXVtqXVxuICAgICAgICAgICAgICB0aGlzLm1hcFtpXVtqXSA9IG51bGxcbiAgICAgICAgICAgICAgdGhpcy5tYXBbaSArIGNhbkZhbGxdW2pdLmdldENvbXBvbmVudCgnZWxlbWVudCcpLnBsYXlGYWxsQWN0aW9uKGNhbkZhbGwsIHtcbiAgICAgICAgICAgICAgICB4OiBqLFxuICAgICAgICAgICAgICAgIHk6IGkgKyBjYW5GYWxsLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGNhbkZhbGw7IGsrKykge1xuICAgICAgICAgIHRoaXMubWFwW2tdW2pdID0gdGhpcy5pbnN0YW50aWF0ZUJsb2NrKHRoaXMsIHtcbiAgICAgICAgICAgIHg6IGosXG4gICAgICAgICAgICB5OiBrLFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuYmxvY2tXaWR0aCxcbiAgICAgICAgICAgIHN0YXJ0VGltZTogbnVsbFxuICAgICAgICAgIH0sIHRoaXMuYmxvY2tzQ29udGFpbmVyLCAnJywge1xuICAgICAgICAgICAgeDogaixcbiAgICAgICAgICAgIHk6IC1jYW5GYWxsICsga1xuICAgICAgICAgIH0pXG4gICAgICAgICAgdGhpcy5tYXBba11bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50JykucGxheUZhbGxBY3Rpb24oY2FuRmFsbCwgbnVsbClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2hlY2tNZ3IuaW5pdCh0aGlzKVxuICAgICAgICB0aGlzLmNoZWNrTWdyLmVsZW1lbnRDaGVjayh0aGlzKVxuICAgICAgICB0aGlzLl9zdGF0dXMgPSAxXG4gICAgICB9LCAyNTApXG4gICAgfSlcbiAgfSxcbiAgZ2FtZU92ZXIoKSB7XG4gICAgdGhpcy5fc3RhdHVzID0gM1xuICAgIHRoaXMuX2NvbnRyb2xsZXIucGFnZU1nci5hZGRQYWdlKDIpXG4gICAgdGhpcy5fY29udHJvbGxlci5wYWdlTWdyLmFkZFBhZ2UoNClcbiAgICBpZiAodGhpcy5fY29udHJvbGxlci5zb2NpYWwubm9kZS5hY3RpdmUpIHtcbiAgICAgIHRoaXMuX2NvbnRyb2xsZXIuc29jaWFsLmNsb3NlQmFubmVyQWR2KClcbiAgICB9XG4gIH0sXG4gIC8vIHRvZG8g5aSN5rS7XG4gIGFza1Jldml2ZSgpIHtcbiAgICB0aGlzLl9jb250cm9sbGVyLnBhZ2VNZ3IuYWRkUGFnZSgyKVxuICAgIHRoaXMuX2NvbnRyb2xsZXIucGFnZU1nci5hZGRQYWdlKDUpXG4gICAgdGhpcy5yZXZpdmVQYWdlLmFjdGl2ZSA9IHRydWVcbiAgICB0aGlzLnJldml2ZVBhZ2UuZ2V0Q2hpbGRCeU5hbWUoJ2Fza1Jldml2ZScpLmFjdGl2ZSA9IHRydWVcbiAgICB0aGlzLnJldml2ZVBhZ2UuZ2V0Q2hpbGRCeU5hbWUoJ3N1Y2Nlc3NSZXZpdmUnKS5hY3RpdmUgPSBmYWxzZVxuICAgIHRoaXMucmFuZ2VTcHJpdGUgPSB0aGlzLnJldml2ZVBhZ2UuZ2V0Q2hpbGRCeU5hbWUoJ2Fza1Jldml2ZScpLmdldENoaWxkQnlOYW1lKCdudW1CZycpLmdldENoaWxkQnlOYW1lKCdzcHJpdGUnKS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKVxuICAgIHRoaXMucmFuZ2VTcHJpdGUuZmlsbFJhbmdlID0gMVxuICAgIHRoaXMuaXNSYW5nZUFjdGlvbiA9IHRydWVcbiAgICBsZXQgbnVtTGFiZWwgPSB0aGlzLnJldml2ZVBhZ2UuZ2V0Q2hpbGRCeU5hbWUoJ2Fza1Jldml2ZScpLmdldENoaWxkQnlOYW1lKCdudW1CZycpLmdldENoaWxkQnlOYW1lKCdudW0nKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpXG4gICAgbnVtTGFiZWwuc3RyaW5nID0gOVxuICAgIGlmICh0aGlzLnJldml2ZVRpbWVyKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMucmV2aXZlVGltZXIpXG4gICAgfVxuICAgIHRoaXMucmV2aXZlVGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBpZiAoK251bUxhYmVsLnN0cmluZyA+IDApIHtcbiAgICAgICAgbnVtTGFiZWwuc3RyaW5nLS1cbiAgICAgICAgdGhpcy5yYW5nZVNwcml0ZS5maWxsUmFuZ2UgPSAxXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uU2tpcFJldml2ZSgpXG4gICAgICB9XG4gICAgfSwgMTAwMClcblxuICB9LFxuICBvblJldml2ZUJ1dHRvbigpIHtcbiAgICBjbGVhckludGVydmFsKHRoaXMucmV2aXZlVGltZXIpXG4gICAgdGhpcy5pc1JhbmdlQWN0aW9uID0gZmFsc2VcbiAgICBpZiAodGhpcy5fY29udHJvbGxlci5zb2NpYWwubm9kZS5hY3RpdmUpIHtcbiAgICAgIHRoaXMuX2NvbnRyb2xsZXIuc29jaWFsLm9uUmV2aXZlQnV0dG9uKDEpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd1Jldml2ZVN1Y2Nlc3MoKVxuICAgIH1cbiAgfSxcbiAgc2hvd1Jldml2ZVN1Y2Nlc3MoKSB7XG4gICAgLy9jb25zb2xlLmxvZygn5omT5byA5aSN5rS75oiQ5Yqf6aG16Z2iJylcbiAgICB0aGlzLnJldml2ZVBhZ2UuZ2V0Q2hpbGRCeU5hbWUoJ2Fza1Jldml2ZScpLmFjdGl2ZSA9IGZhbHNlXG4gICAgdGhpcy5yZXZpdmVQYWdlLmdldENoaWxkQnlOYW1lKCdzdWNjZXNzUmV2aXZlJykuYWN0aXZlID0gdHJ1ZVxuICB9LFxuICBvblJldml2ZUNlcnRhaW5CdG4oKSB7XG4gICAgdGhpcy5fY29udHJvbGxlci5wYWdlTWdyLnJlbW92ZVBhZ2UoMilcbiAgICB0aGlzLnJldml2ZVBhZ2UuYWN0aXZlID0gZmFsc2VcbiAgICB0aGlzLl9zdGF0dXMgPSAxXG4gICAgdGhpcy5fc2NvcmUub25SZXZpdmUoKVxuICB9LFxuICB1cGRhdGUoKSB7XG4gICAgaWYgKHRoaXMuaXNSYW5nZUFjdGlvbikge1xuICAgICAgdGhpcy5yYW5nZVNwcml0ZS5maWxsUmFuZ2UgLT0gMSAvIDYwXG4gICAgfVxuICB9LFxuICBvblNraXBSZXZpdmUoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aGlzLnJldml2ZVRpbWVyKVxuICAgIHRoaXMuX2NvbnRyb2xsZXIucGFnZU1nci5wYWdlc1s1XS5hY3RpdmUgPSBmYWxzZVxuICAgIHRoaXMuX3Njb3JlLm9uR2FtZU92ZXIodHJ1ZSlcbiAgICB0aGlzLmlzUmFuZ2VBY3Rpb24gPSBmYWxzZVxuICB9LFxuICByZXN0YXJ0KCkge1xuICAgIHRoaXMuX2NvbnRyb2xsZXIucGFnZU1nci5vbk9wZW5QYWdlKDEpXG4gICAgdGhpcy5yZWNvdmVyeUFsbEJsb2NrcygpLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5nYW1lU3RhcnQoKVxuICAgIH0pXG4gIH0sXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0t6YGT5YW355u45YWzLS0tLS0tLS0tLS0tLS0tXG4gIC8vIOWCqOWtmOeUqOaIt+eCueWHu+aXtueahOaWueWdlyDnlKjkuo7nlJ/miJDpgZPlhbdcbiAgb25Vc2VyVG91Y2hlZChpaWQsIGppZCwgaXRlbVR5cGUsIGNvbG9yLCB3YXJuaW5nLCBwb3MpIHtcbiAgICB0aGlzLnRhcmdldCA9IHtcbiAgICAgIGk6IGlpZCxcbiAgICAgIGo6IGppZCxcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIGl0ZW1UeXBlOiBpdGVtVHlwZSxcbiAgICAgIHg6IHBvcy54LFxuICAgICAgeTogcG9zLnksXG4gICAgICB3YXJuaW5nOiB3YXJuaW5nXG4gICAgfVxuICB9LFxuICAvLyDnlJ/miJDpgZPlhbcgdHlwZSAx5Li65Y+M5YCN5YCN5pWwIDLkuLrngrjlvLkgM+S4uuWKoOS6lOeZvlxuICBnZW5lcmF0ZVByb3BJdGVtKHR5cGUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgLy8g5piv5ZCm5YGa6YGT5YW355Sf5oiQ5Yqo55S7XG4gICAgICB0aGlzLm1hcFt0aGlzLnRhcmdldC5pXVt0aGlzLnRhcmdldC5qXSA9IHRoaXMuaW5zdGFudGlhdGVCbG9jayh0aGlzLCB7XG4gICAgICAgIHg6IHRoaXMudGFyZ2V0LmosXG4gICAgICAgIHk6IHRoaXMudGFyZ2V0LmksXG4gICAgICAgIGNvbG9yOiB0aGlzLnRhcmdldC5jb2xvcixcbiAgICAgICAgd2lkdGg6IHRoaXMuYmxvY2tXaWR0aCxcbiAgICAgICAgc3RhcnRUaW1lOiBudWxsXG4gICAgICB9LCB0aGlzLmJsb2Nrc0NvbnRhaW5lciwgdHlwZSlcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICByZXNvbHZlKClcbiAgICAgIH0sIDMwMClcbiAgICB9KVxuICB9LFxuICBjaGVja0dlbmVyYXRlUHJvcChjaGFpbikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodGhpcy50YXJnZXQud2FybmluZykge1xuICAgICAgICB0aGlzLmdlbmVyYXRlUHJvcEl0ZW0odGhpcy50YXJnZXQud2FybmluZykudGhlbigoKSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgICByZXNvbHZlKClcbiAgICB9KVxuICB9LFxuICBvbkl0ZW0odHlwZSwgY29sb3IsIHBvcykge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAxOlxuICAgICAgICAvLyDliIbmlbDnv7vlgI0g5pyA6auY5YWr5YCNXG4gICAgICAgIHRoaXMuX3Njb3JlLnRpcEJveC5pbml0KHRoaXMuX3Njb3JlLCAxKVxuICAgICAgICB0aGlzLl9zY29yZS5hZGRNdWx0KGNvbG9yLCBwb3MpXG4gICAgICAgIHRoaXMuX2NvbnRyb2xsZXIubXVzaWNNYW5hZ2VyLm9uRG91YmxlKClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd051bTsgaSsrKSB7IC8v6KGMXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd051bTsgaisrKSB7IC8v5YiXXG4gICAgICAgICAgICBpZiAodGhpcy5tYXBbaV1bal0gJiYgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50JykuX3N0YXR1cyA9PSAxKSB7XG4gICAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhwb3MueCAtIHRoaXMubWFwW2ldW2pdLngsIDIpICsgTWF0aC5wb3cocG9zLnkgLSB0aGlzLm1hcFtpXVtqXS55LCAyKSlcbiAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlICE9IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcFtpXVtqXS5nZXRDb21wb25lbnQoJ2VsZW1lbnQnKS5zdXJmYWNlQWN0aW9uKGRpc3RhbmNlKVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgLy8g54K45by5IOa2iOmZpOWQjOenjeminOiJsueahFxuICAgICAgICB0aGlzLl9zY29yZS50aXBCb3guaW5pdCh0aGlzLl9zY29yZSwgMilcbiAgICAgICAgdGhpcy5ub2RlLnJ1bkFjdGlvbihBQy5zaGFja0FjdGlvbigwLjEsIDEwKSlcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRyb2xsZXIuc29jaWFsLm5vZGUuYWN0aXZlKSB7XG4gICAgICAgICAgdGhpcy5fY29udHJvbGxlci5zb2NpYWwub25TaGFrZVBob25lKClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzUHJvcENoYWluID0gdHJ1ZVxuICAgICAgICB0aGlzLl9jb250cm9sbGVyLm11c2ljTWFuYWdlci5vbkJvb20oKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93TnVtOyBpKyspIHsgLy/ooYxcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMucm93TnVtOyBqKyspIHsgLy/liJdcbiAgICAgICAgICAgIGlmICh0aGlzLm1hcFtpXVtqXSAmJiB0aGlzLm1hcFtpXVtqXS5nZXRDb21wb25lbnQoJ2VsZW1lbnQnKS5jb2xvciA9PSBjb2xvciAmJiB0aGlzLm1hcFtpXVtqXSAmJiB0aGlzLm1hcFtpXVtqXS5nZXRDb21wb25lbnQoJ2VsZW1lbnQnKS5fc3RhdHVzICE9IDIpIHtcbiAgICAgICAgICAgICAgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50Jykub25Ub3VjaGVkKGNvbG9yLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLm1hcFtpXVtqXS5ydW5BY3Rpb24oQUMucm9ja0FjdGlvbigwLjIsIDEwKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgMzogLy86ICDliqDmraXmlbBcbiAgICAgICAgdGhpcy5fc2NvcmUudGlwQm94LmluaXQodGhpcy5fc2NvcmUsIDQpXG4gICAgICAgIHRoaXMuX2NvbnRyb2xsZXIubXVzaWNNYW5hZ2VyLm9uRG91YmxlKClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd051bTsgaSsrKSB7IC8v6KGMXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd051bTsgaisrKSB7IC8v5YiXXG4gICAgICAgICAgICBpZiAodGhpcy5tYXBbaV1bal0gJiYgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50JykuX3N0YXR1cyA9PSAxKSB7XG4gICAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhwb3MueCAtIHRoaXMubWFwW2ldW2pdLngsIDIpICsgTWF0aC5wb3cocG9zLnkgLSB0aGlzLm1hcFtpXVtqXS55LCAyKSlcbiAgICAgICAgICAgICAgaWYgKGRpc3RhbmNlICE9IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcFtpXVtqXS5nZXRDb21wb25lbnQoJ2VsZW1lbnQnKS5zdXJmYWNlQWN0aW9uKGRpc3RhbmNlKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Njb3JlLm9uU3RlcCgzKS50aGVuKClcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6IC8vIDog5raI6Zmk5YWo6YOo5Y2V6Lqr55qE5pa55Z2XXG4gICAgICAgIHRoaXMuX3Njb3JlLnRpcEJveC5pbml0KHRoaXMuX3Njb3JlLCA1KVxuICAgICAgICB0aGlzLmlzUHJvcENoYWluID0gdHJ1ZVxuICAgICAgICB0aGlzLl9jb250cm9sbGVyLm11c2ljTWFuYWdlci5vbk1hZ2ljKClcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd051bTsgaSsrKSB7IC8v6KGMXG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnJvd051bTsgaisrKSB7IC8v5YiXXG4gICAgICAgICAgICBpZiAodGhpcy5tYXBbaV1bal0gJiYgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50JykuaXNTaW5nbGUgJiYgdGhpcy5tYXBbaV1bal0gJiYgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50JykuX3N0YXR1cyAhPSAyKSB7XG4gICAgICAgICAgICAgIGxldCBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhwb3MueCAtIHRoaXMubWFwW2ldW2pdLngsIDIpICsgTWF0aC5wb3cocG9zLnkgLSB0aGlzLm1hcFtpXVtqXS55LCAyKSlcbiAgICAgICAgICAgICAgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50Jykub25Ub3VjaGVkKGNvbG9yLCBmYWxzZSwgdHJ1ZSwgZGlzdGFuY2UpXG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi6a2U5rOV5qOS6Kem5Y+R55qE54K5XCIsIGksaix0aGlzLm1hcFtpXVtqXS5nZXRDb21wb25lbnQoJ2VsZW1lbnQnKS5jb2xvciwgdGhpcy5tYXBbaV1bal0uZ2V0Q29tcG9uZW50KCdlbGVtZW50JykuaXNTaW5nbGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSxcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0g6aKE5Yi25L2T5a6e5L6L5YyWLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIOeUn+aIkOWvueixoeaxoFxuICBnZW5lcmF0ZVBvb2woKSB7XG4gICAgdGhpcy5ibG9ja1Bvb2wgPSBuZXcgY2MuTm9kZVBvb2woKVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5wb3codGhpcy5yb3dOdW0sIDIpOyBpKyspIHtcbiAgICAgIGxldCBibG9jayA9IGNjLmluc3RhbnRpYXRlKHRoaXMuYmxvY2tQcmVmYWIpXG4gICAgICB0aGlzLmJsb2NrUG9vbC5wdXQoYmxvY2spXG4gICAgfVxuICB9LFxuICAvLyDlrp7kvovljJbljZXkuKrmlrnlnZdcbiAgaW5zdGFudGlhdGVCbG9jayhzZWxmLCBkYXRhLCBwYXJlbnQsIGl0ZW1UeXBlLCBwb3MpIHtcbiAgICBpdGVtVHlwZSA9IGl0ZW1UeXBlID8gaXRlbVR5cGUgOiAwXG4gICAgaWYgKGl0ZW1UeXBlICE9IDApIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwi6YGT5YW36IqC54K55pWw5o2uXCIsIGRhdGEsIGl0ZW1UeXBlKVxuICAgIH1cbiAgICBsZXQgYmxvY2sgPSBudWxsXG4gICAgaWYgKHNlbGYuYmxvY2tQb29sICYmIHNlbGYuYmxvY2tQb29sLnNpemUoKSA+IDApIHtcbiAgICAgIGJsb2NrID0gc2VsZi5ibG9ja1Bvb2wuZ2V0KClcbiAgICB9IGVsc2Uge1xuICAgICAgYmxvY2sgPSBjYy5pbnN0YW50aWF0ZShzZWxmLmJsb2NrUHJlZmFiKVxuICAgIH1cbiAgICBibG9jay5wYXJlbnQgPSBwYXJlbnRcbiAgICBibG9jay5zY2FsZSA9IDFcbiAgICBibG9jay54ID0gMFxuICAgIGJsb2NrLnkgPSAwXG4gICAgYmxvY2suZ2V0Q29tcG9uZW50KCdlbGVtZW50JykuaW5pdChzZWxmLCBkYXRhLCB0aGlzLmJsb2NrV2lkdGgsIGl0ZW1UeXBlLCBwb3MpXG4gICAgcmV0dXJuIGJsb2NrXG4gIH0sXG4gIC8vIOWbnuaUtuaJgOacieiKgueCuVxuICByZWNvdmVyeUFsbEJsb2NrcygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuID0gdGhpcy5ibG9ja3NDb250YWluZXIuY2hpbGRyZW5cbiAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggIT0gMCkge1xuICAgICAgICBsZXQgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoXG4gICAgICAgIC8vICAgY29uc29sZS5sb2cobGVuZ3RoKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5ibG9ja1Bvb2wucHV0KGNoaWxkcmVuWzBdKVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dOdW07IGkrKykge1xuICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5yb3dOdW07IGorKykge1xuICAgICAgICAgICAgdGhpcy5tYXBbaV1bal0gPSBudWxsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXNvbHZlKCcnKVxuICAgIH0pXG4gIH0sXG5cbn0pOyJdfQ==